---
- name: Verify
  hosts: all
  become: True
  gather_facts: False
  vars_files:
    - ../../vars/main.yml
    - vars/vars_test_groups.yml
    - vars/vars_test_users.yml
    - vars/vars_test_sudoers.yml
  tasks:
    - name: Gather package facts
      package_facts:
        manager: auto

    - name: Assert that required packages are installed
      assert:
        that: "'{{ item }}' in ansible_facts.packages"
      loop: '{{ role_localusers_required_packages }}'

    - name: Populate group list
      set_fact:
        role_localusers_group_list: '{{ role_localusers_group_list | default([]) + vars[item] }}'
      loop: "{{ vars.keys() | select('match', '^role_localusers_group_list_.*$') | list }}"

    - name: Ensure a test set of groups are created
      group:
        name: '{{ item.name }}'
        gid: '{{ item.gid | default(omit) }}'
        state: '{{ item.state }}'
        system: '{{ item.system | default(omit) }}'
        local: '{{ item.local | default(omit) }}'
      loop: '{{ role_localusers_group_list | default([]) }}'

    - name: Populate user list
      set_fact:
        role_localusers_user_list: '{{ role_localusers_user_list | default([]) + vars[item] }}'
      loop: "{{ vars.keys() | select('match', '^role_localusers_user_list_.*$') | list }}"

    - name: Ensure users are managed
      user:
        name: '{{ item.name }}'
        comment: '{{ item.comment }}'
        uid: '{{ item.uid | default(omit) }}'
        non_unique: '{{ item.non_unique | default(omit) }}'
        state: '{{ item.state }}'
        remove: '{{ item.remove | default(omit) }}'
        force: '{{ item.force | default(omit) }}'
        local: '{{ item.local | default(omit) }}'
        password: '{{ item.password | default(omit) }}'
        password_lock: '{{ item.password_lock | default(omit) }}'
        update_password: '{{ item.update_password | default(omit) }}'
        expires: '{{ item.expires | default(omit) }}'
        home: '{{ item.home | default(omit) }}'
        move_home: '{{ item.move_home | default(omit) }}'
        create_home: '{{ item.create_home | default(omit) }}'
        profile: '{{ item.profile | default(omit) }}'
        skeleton: '{{ item.skeleton | default(omit) }}'
        shell: '{{ item.shell | default(omit) }}'
        system: '{{ item.system | default(omit) }}'
        seuser: '{{ item.seuser | default(omit) }}'
        role: '{{ item.role | default(omit) }}'
        group: '{{ item.group | default(omit) }}'
        groups: '{{ item.groups | default(omit) }}'
        append: '{{ item.append | default(omit) }}'
        login_class: '{{ item.login_class | default(omit) }}'
        authorization: '{{ item.authorization | default(omit) }}'
        hidden: '{{ item.hidden | default(omit) }}'
        ssh_key_type: '{{ item.ssh_key_type | default(omit) }}'
        ssh_key_passphrase: '{{ item.ssh_key_passphrase | default(omit) }}'
        ssh_key_file: '{{ item.ssh_key_file | default(omit) }}'
        ssh_key_comment: '{{ item.ssh_key_comment | default(omit) }}'
        ssh_key_bits: '{{ item.ssh_key_bits | default(omit) }}'
        generate_ssh_key: '{{ item.generate_ssh_key | default(omit) }}'
      loop: '{{ role_localusers_user_list | default([]) }}'

    - name: Manage users authorized ssh key
      authorized_key:
        user: '{{ item.name }}'
        state: '{{ item.authorized_key_state }}'
        comment: '{{ item.authorized_key_comment | default(omit) }}'
        key: '{{ item.authorized_key_files | default(omit) }}'
        key_options: '{{ item.authorized_key_options | default(omit) }}'
        path: '{{ item.authorized_key_path | default(omit) }}'
        validate_certs: '{{ item.authorized_key_validate_certs | default(omit) }}'
        exclusive: '{{ item.authorized_key_exclusive | default(omit) }}'
        follow: '{{ item.authorized_key_follow | default(omit) }}'
        manage_dir: '{{ item.authorized_key_manage_dir | default(omit) }}'
      loop: '{{ role_localusers_user_list | default([]) }}'
      when:
        - item.authorized_key_enable | default(False) | bool
        - item.state == 'present'

    - name: Populate sudoers file list
      set_fact:
        role_localusers_sudoers_list: '{{ role_localusers_sudoers_list | default([]) + vars[item] }}'
      loop: "{{ vars.keys() | select('match', '^role_localusers_sudoers_list_.*$') | list }}"

    - name: Manage sudoers files
      block:
        - name: Create and modify sudoers files
          template:
            src: templates/sudoers_file_template.j2
            dest: '{{ item.path | default(omit) }}'
            backup: '{{ item.backup | default(omit) }}'
            attributes: '{{ item.attributes | default(omit) }}'
            owner: '{{ item.owner | default("root") }}'
            group: '{{ item.group | default("root") }}'
            mode: '{{ item.mode | default("0440") }}'
            block_start_string: '{{ item.block_start_string | default(omit) }}'
            block_end_string: '{{ item.block_end_string | default(omit) }}'
            variable_start_string: '{{ item.variable_start_string | default(omit) }}'
            variable_end_string: '{{ item.variable_end_string | default(omit) }}'
            lstrip_blocks: '{{ item.lstrip_blocks | default(omit) }}'
            trim_blocks: '{{ item.trim_blocks | default(omit) }}'
            newline_sequence: '{{ item.newline_sequence | default(omit) }}'
            output_encoding: '{{ item.output_encoding | default(omit) }}'
            selevel: '{{ item.selevel | default(omit) }}'
            serole: '{{ item.serole | default(omit) }}'
            setype: '{{ item.setype | default(omit) }}'
            seuser: '{{ item.seuser | default(omit) }}'
            unsafe_writes: '{{ item.unsafe_writes | default(omit) }}'
            follow: '{{ item.follow | default(omit) }}'
            force: '{{ item.force | default(omit) }}'
            validate: "/usr/sbin/visudo -cf %s"
          loop: '{{ role_localusers_sudoers_list }}'
          when:
            - item.state == 'present'
      always:
        - name: Cleanup unwanted sudoers files
          file:
            path: '{{ item.path }}'
            state: absent
          loop: '{{ role_localusers_sudoers_list }}'
          when:
            - item.state == 'absent'
            - item.path != '/etc/sudoers'

...
